name: Build Test

on:
  push:
    # Don't run for tags
    tags-ignore:
      - '**'
    branches:
      - '**'
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-webos:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install webOS NDK
        id: webos-ndk
        uses: webosbrew/setup-webos-ndk-action@main

      - name: Install webOS CLI & Compatibility checker
        run: sudo npm install -g @webosose/ares-cli @webosbrew/compat-checker

      - name: Build
        env:
          TOOLCHAIN_FILE: ${{steps.webos-ndk.outputs.cmake-toolchain}}
        run: ./tools/webos/easy_build.sh -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Compatibility Check
        run: webosbrew-ipk-compat-checker --markdown --github-emoji --quiet dist/*.ipk >> $GITHUB_STEP_SUMMARY

      - name: Add Commit Hash Suffix
        shell: bash
        working-directory: dist
        run: for file in *.ipk ; do mv $file ${file//_arm/-${GITHUB_SHA:0:8}_arm} ; done

      - uses: actions/upload-artifact@v3
        with:
          name: webos-snapshot
          path: dist/*.ipk

  build-raspi:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Run apt-get update
        shell: bash
        run: sudo apt-get -y -qq update

      - name: Prepare Sysroot
        id: pi-sysroot
        uses: mariotaku/raspbian-sysroot-action@v1.1
        with:
          packages: ${{github.workspace}}/deploy/raspbian/sysroot-packages.list

      - name: Install Build Tools
        shell: bash
        # apt-get update was implicitly called, so we don't have to call it here
        run: sudo apt-get -y -qq install crossbuild-essential-armhf cmake

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        # Use a bash shell, so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the GitHub Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DTARGET_RASPI=ON
          -DCMAKE_TOOLCHAIN_FILE=${{steps.pi-sysroot.outputs.cmake-toolchain}}


      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build . --config $BUILD_TYPE
